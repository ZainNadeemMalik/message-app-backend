// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id               Int          @id @default(autoincrement())
//   username         String       @unique
//   password         String
//   friends          Friendship[] @relation("UserFriends") // Relation field for friendships
//   messagesSent     Message[]    @relation("SentMessages")
//   messagesReceived Message[]    @relation("ReceivedMessages")
//   createdAt        DateTime     @default(now())
//   updatedAt        DateTime     @updatedAt

//   // Reverse relations for friendships
//   friendshipsAsUser1 Friendship[] @relation("FriendshipUser1")
//   friendshipsAsUser2 Friendship[] @relation("FriendshipUser2")
// }

// model Friendship {
//   id        Int      @id @default(autoincrement())
//   user1Id   Int
//   user2Id   Int
//   user1     User     @relation("FriendshipUser1", fields: [user1Id], references: [id])
//   user2     User     @relation("FriendshipUser2", fields: [user2Id], references: [id])
//   createdAt DateTime @default(now())

//   // Add the inverse relation
//   users User[] @relation("UserFriends") // The inverse relation of `friends`

//   @@unique([user1Id, user2Id]) // Prevent duplicate friendships
// }

// model Message {
//   id          Int      @id @default(autoincrement())
//   senderId    Int
//   recipientId Int
//   sender      User     @relation("SentMessages", fields: [senderId], references: [id])
//   recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
//   content     String
//   createdAt   DateTime @default(now())
//   isRead      Boolean  @default(false)
// }

model User {
  id                 Int          @id @default(autoincrement())
  username           String       @unique
  password           String
  friendshipsAsUser1 Friendship[] @relation("FriendshipUser1")
  friendshipsAsUser2 Friendship[] @relation("FriendshipUser2")
  messagesSent       Message[]    @relation("SentMessages")
  messagesReceived   Message[]    @relation("ReceivedMessages")
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Friendship {
  id        Int      @id @default(autoincrement())
  user1Id   Int
  user2Id   Int
  user1     User     @relation("FriendshipUser1", fields: [user1Id], references: [id])
  user2     User     @relation("FriendshipUser2", fields: [user2Id], references: [id])
  createdAt DateTime @default(now())

  @@unique([user1Id, user2Id])
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  recipientId Int
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  content     String
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
}
